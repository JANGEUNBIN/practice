
・do-while문
  while문의 경우 조건이 만족하지 않는다면 한번도 반복하지 않을 수 있다.
  하지만, do while문의 경우는 무조건 한번은 실행되는 반복문이다.

    import java.util.Scanner;
    
    public class DoWhileExam {
        public static void main(String[] args) {
            int value = 0;
            // Scanner는 java.util 패키지에 있는 클래스로써 키보드로 부터 값을 입력받는다던지 할 때 유용하게 사용할 수 있는 클래스입니다.
            Scanner scan = new Scanner(System.in);
            //위 처럼 작성하시면 키보드로부터 값을 입력받을 수 있는 Scanner객체가 생성됩니다. 

            do{
                value = scan.nextInt(); // Scanner클래스를 이용하여 키보드로 부터 숫자값을 입력
                System.out.println("입력값 : " + value);  
            }while(value != 10);  // 입력값이 10이 아닐 경우에는 계속 반복

            System.out.println("반복문 종료");
        }
    }


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

for：for반복문은 변수초기화, 조건식, 증감식이 한줄에 모두 있다.
    １）초기화식은 최초 한 번만 수행합니다.
    ２）조건식을 수행해서 수행결과가 false라면 for 반복문을 빠져 나갑니다.
    ３）수행 결과가 true라면 실행문을 수행한다.
    ４）증감식을 수행한다.
        2번부터 4번까지 반복적으로 수행한다.

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

・1차원 배열：배열은 같은 데이터 타입을 가진 연속된 메모리 공간으로 이루어진 자료구조이다.
            같은 데이터 타입을 가진 여러개의 변수가 필요할 때 사용한다.

  （１）배열 생성 방법
    정수를 4개 저장 할 수 있는 배열을 생성 하는 방법
        int[] array1 = new int[4];

  （２）배열에 값을 저장하는 방법
      array1[0] = 1;
      array1[1] = 2;
      array1[2] = 3;
      array1[3] = 4;
        //자바에서 배열의 인덱스는 0번 부터 사용한다. 4개짜리 배열은 0부터 3까지의 인덱스를 가지게 된다.
        //배열인덱스 0번부터 3번까지 차례로 1,2,3,4 값을 저장한다. 

  （３）배열에 저장된 값을 꺼내서 사용하는 방법
      int value = array1[2]; 
        //array1 이 참조하는 배열의 2번 인덱스에 해당하는 값 3을 꺼내서 int형 변수 value에 담는다. 
      System.out.println(array1[1]); 
        //array1 이 참조하는 배열의 1번 인덱스에 해당하는 값 2가 콘솔에 출력된다. 

  （４）선언과 동시에 초기화하는 방법
      int[] array2 = new int[]{1,2,3,4,5};
        //int 값을 5개저장 할 수 있는 배열이며, 해당 배열에는 1,2,3,4,5가 순서대로 저장되게 된다.



・2차원 배열：2차원 배열이란 배열의 배열이다.
  （１）2차원 배열 생성 방법
        정수를 4개씩 담을 수 있는 배열이 3개 생성된다.
          int[][] array4 = new int[3][4];

  （２）2차원 배열에 값을 저장하는 방법
        만약 array4[1] = 10 ; 이렇게 사용하면 오류!!
        array4[1] 은 또 다른 1차원 배열을 가리킬 수 있는 참조형 변수이기 때문에 값을 담을수는 없다.
        array4[0][0] = 10; 
  
  （３）가변크기의 2차원 배열을 생성하는 방법
    int[][] array5 = new int[3][];
      //위와 같이 선언하면 array5는 3개짜리 배열을 참조한다. 3개짜리 배열은 아직 참조하는 배열이 없다는 것을 의미.

      array5[0] = new int[1]; //정수를 하나 담을 수 있는 배열을 생성해서 array5 의 0 번째 인덱스가 참조한다.  
      array5[1] = new int[2]; //정수를 두개 담을 수 있는 배열을 생성해서 array5 의 1 번째 인덱스가 참조한다.  
      array5[2] = new int[3]; //정수를 세개 담을 수 있는 배열을 생성해서 array5 의 2 번째 인덱스가 참조한다. 
      
  （４）선언과 동시에 초기화하는 방법
      int[][] array6 = {{1}, {2,3}, {4,5,6}};
        //위와 같이 선언할 경우 array6[0][0] 는 1이다. array6[1][0]은 2이다. 


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


・참조타입：참조형 타입은 기본형 타입을 제외한 모든 타입입니다. 앞서 배웠던, 배열도 참조형이고, 클래스도 모두 참조 타입이다
  참조형 변수
      String str = new String(hello);
      （str 변수 앞에 기본형 타입이 아닌 String클래스가 적혀있다.）
            이퀄(=)뒤에는 new 다음에 생성자라는 것이 있다.
            new 라는 키워드는 객체를 메모리에 올려준다. 이렇게 메모리에 올라간 객체를 인스턴스라고 말한다.
            메모리에 올라간 인스턴스를 가리키는 변수, 참조하는 변수, 레퍼런스 하는 변수가 str 이다. （참조한다. 레퍼런스 한다라는 것은 변수가 인스턴스를 가지고 있는게 아니라 말그대로 가리킨다는 의미）
            str이라는 변수에는 메모리의 위치 값이 저장되는 것이다. 메모리의 위치값이 저장된다고 하더라도, 어떤 메모리에 저장되는지 그 정보를 알 수 있는 방법은 없다. 그렇기 때문에 str변수는 String 인스턴스를 참조한다라고만 아시면 된다.
            앞으로 배울 클래스들은 모두 참조형이다


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

필드(field)선언
자동차는 자동차 이름, 자동차 번호를 가지고 있고, 자동차는 달리고 멈추는 기능이 있다. 여기에서 가지고 있는 것을 속성이라고 한다. 자바에서는 이러한 속성을 필드(Field)라는 용어로 사용한다.
  （１）이름과 번호를 필드로 가지고 있는 Car클래스 선언
      public class Car{
          String name;    
          int number;
      }
  （２）Car 클래스를 인스턴스화 하기
      Car c1 = new Car();
  （３）속성 이용하기：참조 변수 다음에 나오는 점(dot)은 참조변수가 참조하는 객체가 가지고 있는 것을 사용할 때 사용
      //c1.name은  c1이 참조하는 객체의 name 을 의미.


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

메소드?
  ・필드가 물체의 상태라면, 물체의 행동에 해당하는게 메소드다. car에 이름과 번호가 있기도 하지만, car는 앞으로 전진할수도 있고 후진하는 행동도 할 수 있다.
  ・메소드는 입력값이 있고, 그 입력값을 받아서 무언가 한 다음 결과를 도출해 내는 수학의 함수와 비슷한 개념이다.
  ・이때 입력값을 매개변수라고 하고,결과값을 리턴값이라고 합니다.
    - 인자( Argument ) 는 어떤 함수를 호출시에 전달되는 값을 의미한다.
    - 매개 변수( Parameter ) 는 그 전달된 인자를 받아들이는 변수를 의미한다.
  ・메소드란 클래스가 가지고 있는 기능이다. 클래스 안에 선언됩니다.

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

